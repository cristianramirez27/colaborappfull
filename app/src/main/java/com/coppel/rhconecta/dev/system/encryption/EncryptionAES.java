package com.coppel.rhconecta.dev.system.encryption;

import static com.coppel.rhconecta.dev.business.Configuration.AppConfig.ENDPOINT_AES;
import static com.coppel.rhconecta.dev.business.utils.ServicesConstants.AUTHORIZATION;
import static com.coppel.rhconecta.dev.business.utils.ServicesConstants.URL_BASE;

import android.util.Base64;

import com.coppel.rhconecta.dev.BuildConfig;
import com.coppel.rhconecta.dev.CoppelApp;
import com.coppel.rhconecta.dev.views.utils.AppUtilities;
import com.google.gson.JsonObject;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamClass;
import java.io.OutputStream;
import java.io.Serializable;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.security.SecureRandom;
import java.security.spec.AlgorithmParameterSpec;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.SecretKeySpec;

/**
 * The Advanced Encryption Standard (also known as Rijndael) is one of the most popular global
 * encryption standards, that is why its acronym AES keeps coming up in almost every discussion
 * related to cyber security.
 */
public class EncryptionAES {

    private static final SecureRandom secureRandom = new SecureRandom();

    static CoppelApp app = (CoppelApp) CoppelApp.getContext();
    static JsonObject config;

    /**
     * Encrypt the String value received as param.
     * @param value to encrypt.
     * @return encrypted String generated by AES algorithm.
     */

    /**
     * Decrypt the String value received as param.
     * //@param encrypted String value to decrypt.
     * @return decrypted String generated by AES algorithm.
     */

    public static String encryptString(String value) {
        if(value == null) return null;
        try {
            config = AppUtilities.getJsonObjectFromSharedPreferences(app, ENDPOINT_AES);
            byte[] iv = new byte[12];
            secureRandom.nextBytes(iv);
            final Cipher cipher = Cipher.getInstance(config.get("transformation").getAsString());
            GCMParameterSpec parameterSpec = new GCMParameterSpec(128, iv);
            secureRandom.nextBytes(config.get("key").getAsString().getBytes());
            SecretKey secretKey = new SecretKeySpec(config.get("key").getAsString().getBytes(), "AES");
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, parameterSpec);

            byte[] cipherText = cipher.doFinal(value.getBytes(StandardCharsets.UTF_8));

            ByteBuffer byteBuffer = ByteBuffer.allocate(iv.length + cipherText.length);
            byteBuffer.put(iv);
            byteBuffer.put(cipherText);

            byte[] encryptedData = byteBuffer.array();

            // Codificar el resultado en Base64
            return Base64.encodeToString(encryptedData,Base64.DEFAULT);
        } catch (Exception ex) {
            //ex.printStackTrace();
        }
        return null;
    }

    public static String decryptString(String encrypted) {
        if(encrypted == null) return null;
        try {
            config = AppUtilities.getJsonObjectFromSharedPreferences(app, ENDPOINT_AES);
            byte[] encryptedData = Base64.decode(encrypted,Base64.DEFAULT);

            final Cipher cipher = Cipher.getInstance(config.get("transformation").getAsString());
            AlgorithmParameterSpec gcmIv = new GCMParameterSpec(128, encryptedData, 0, 12);
            secureRandom.nextBytes(config.get("key").getAsString().getBytes());
            SecretKey secretKey = new SecretKeySpec(config.get("key").getAsString().getBytes(), "AES");
            cipher.init(Cipher.DECRYPT_MODE, secretKey, gcmIv);

            byte[] plainText = cipher.doFinal(encryptedData, 12, encryptedData.length - 12);

            return new String(plainText, StandardCharsets.UTF_8);
        } catch (Exception exception) {
            //exception.printStackTrace();
        }
        return null;
    }


    /**
     * Encrypt the int value received as param.
     * @param value to encrypt.
     * @return encrypted String generated by AES algorithm.
     */
    public static String encryptInteger(int value) {
        try {
            String valueAsString = String.valueOf(value);
            return encryptString(valueAsString);
        } catch (Exception ex) {
            //ex.printStackTrace();
        }
        return null;
    }

    /**
     * Decrypt the String value received as param.
     * @param encrypted String value to decrypt.
     * @return decrypted int generated by AES algorithm.
     */
    public static int decryptInteger(String encrypted){
        String decryptedValue = decryptString(encrypted);
        assert decryptedValue != null;
        return Integer.parseInt(decryptedValue);
    }

    /**
     * Encrypt the long value received as param.
     * @param value to encrypt.
     * @return encrypted String generated by AES algorithm.
     */
    public static String encryptLong(long value) {
        try {
            String valueAsString = String.valueOf(value);
            return encryptString(valueAsString);
        } catch (Exception ex) {
            //ex.printStackTrace();
        }
        return null;
    }

    /**
     * Decrypt the String value received as param.
     * @param encrypted String value to decrypt.
     * @return decrypted long generated by AES algorithm.
     */
    public static long decryptLong(String encrypted){
        String decryptedValue = decryptString(encrypted);
        assert decryptedValue != null;
        return Long.parseLong(decryptedValue);
    }

    /**
     * Encrypt the boolean value received as param.
     * @param value to encrypt.
     * @return encrypted String generated by AES algorithm.
     */
    public static String encryptBoolean(boolean value) {
        try {
            String valueAsString = String.valueOf(value);
            return encryptString(valueAsString);
        } catch (Exception ex) {
            //ex.printStackTrace();
        }
        return null;
    }

    /**
     * Decrypt the String value received as param.
     * @param encrypted String value to decrypt.
     * @return decrypted boolean generated by AES algorithm.
     */
    public static boolean decryptBoolean(String encrypted){
        String decryptedValue = decryptString(encrypted);
        assert decryptedValue != null;
        return Boolean.parseBoolean(decryptedValue);
    }

    /**
     * Encrypt the Serializable value received as param.
     * @param value to encrypt.
     * @return encrypted String generated by AES algorithm.
     */
    /*public static String encryptSerializable(Serializable value){
        if(value == null) return null;
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ObjectOutputStream oos;
        try {
            String urlBase = (URL_BASE == null || URL_BASE.isEmpty()) ? BuildConfig.URL : URL_BASE;
            if(!urlBase.equals(AUTHORIZATION)){
                oos = new ObjectOutputStream(baos);
                oos.writeObject(value);
                oos.close();

            }else
                return "";
        } catch (Exception e) {
            //e.printStackTrace();
        }
        String serializableAsString = Base64.encodeToString(baos.toByteArray(), Base64.DEFAULT);
        return EncryptionAES.encryptString(serializableAsString);
    }*/

    public static String encryptSerializable(Serializable value) {
        if (value == null) return null;
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        SafeObjectOutputStream oos = null; // Usamos SafeObjectOutputStream aqu√≠
        try {
            String urlBase = (URL_BASE == null || URL_BASE.isEmpty()) ? BuildConfig.URL : URL_BASE;
            if (!urlBase.equals(AUTHORIZATION)) {
                oos = new SafeObjectOutputStream(baos); // Instancia de SafeObjectOutputStream
                oos.writeObject(value); // Escribimos el objeto serializable
                oos.close();
            } else {
                return "";
            }
        } catch (Exception e) {
            // Manejo de errores
        }
        String serializableAsString = Base64.encodeToString(baos.toByteArray(), Base64.DEFAULT);
        return EncryptionAES.encryptString(serializableAsString);
    }
    /**
     * Decrypt the String value received as param.
     * @param encrypted String value to decrypt.
     * @return decrypted Object generated by AES algorithm.
     */
    public static Serializable decryptSerializable(String encrypted){
        if(encrypted == null) return null;
        Object o = null;
        String decryptedObject = decryptString(encrypted);
        try {
            String urlBase = (URL_BASE == null || URL_BASE.isEmpty()) ? BuildConfig.URL : URL_BASE;
            if(!urlBase.equals(AUTHORIZATION)){
                byte[] data = Base64.decode(decryptedObject, Base64.DEFAULT);
                ObjectInputStream ois = new SafeObjectInputStream(new ByteArrayInputStream(data));
                o = ois.readObject();
                ois.close();
            }
        } catch (Exception exception) {
            //exception.printStackTrace();
        }
        return (Serializable) o;
    }

}

class SafeObjectInputStream extends ObjectInputStream {
    public SafeObjectInputStream(InputStream in) throws IOException {
        super(in);
    }

    protected SafeObjectInputStream() throws IOException, SecurityException {
    }

    @Override
    protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {
        if (desc.getName().equals(Object.class.getName())) {
            throw new ClassNotFoundException("Unsupported Class: ");
        }
        return super.resolveClass(desc);
    }
    /* Constructors */
}

class SafeObjectOutputStream extends ObjectOutputStream {

    public SafeObjectOutputStream(OutputStream out) throws IOException {
        super(out);
    }

    protected SafeObjectOutputStream() throws IOException, SecurityException {
        super();
    }

    @Override
    protected void writeClassDescriptor(java.io.ObjectStreamClass desc) throws IOException {
        // Si quieres validar clases antes de escribirlas, puedes implementar l√≥gica aqu√≠
        if (desc.getName().equals(Object.class.getName())) {
            throw new IOException("Unsupported Class: " + desc.getName());
        }
        super.writeClassDescriptor(desc);
    }

    @Override
    protected void writeObjectOverride(Object obj) throws IOException {
        // Opcional: puedes validar objetos antes de escribirlos
        if (obj == null) {
            throw new IOException("Null objects are not supported");
        }
        super.writeObjectOverride(obj);
    }
}
